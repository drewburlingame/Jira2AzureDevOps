using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using CommandDotNet;
using CommandDotNet.Help;
using Jira2AzureDevOps.Logic.Framework;
using MoreLinq.Extensions;

namespace Jira2AzureDevOps.Console.Framework
{
    public class AllCommandsMarkDownHelpProvider : IHelpProvider
    {
        private const byte MaximumValue = byte.MaxValue;

        private static readonly HashSet<char> EscapeChars = new HashSet<char> { '|', '{', '}', '\\' };
        private static readonly string CurrentDirectory = Directory.GetCurrentDirectory();

        private readonly bool _addSubcommandLinks;
        private readonly bool _includeToc;

        public AllCommandsMarkDownHelpProvider(bool addSubcommandLinks, bool includeToc)
        {
            _addSubcommandLinks = addSubcommandLinks;
            _includeToc = includeToc;
        }

        public string GetHelpText(Command rootCommand)
        {
            var sb = new StringBuilder();

            sb.AppendLine($"[](this-file-autogenerated-by-{nameof(AllCommandsMarkDownHelpProvider)})");
            sb.AppendLine();

            var all = rootCommand.GetAllDescendentsCommands().ToCollection();

            if (_includeToc)
            {
                sb.AppendLine("|Command|Description|");
                sb.AppendLine("|---|---|");
                all.ForEach(action: c =>
                {
                    AppendRow(sb, GetCommandLink(c), c.Description);
                });
            }

            all.ForEach(c => AppendHelpText(c, sb));

            return sb.ToString();
        }

        private void AppendHelpText(Command command, StringBuilder sb)
        {
            sb.AppendLine();
            sb.AppendLine("---");
            sb.AppendLine();

            var path = command.GetPath();

            var subcommands = command.Subcommands.OrderBy(c => c.Name).ToList();
            var options = command.Options.OrderBy(o => o.Name).Where(o => !o.IsSystemOption).ToList();
            var operands = command.Operands.OrderBy(o => o.Name).ToList();

            var subCommandsUsage = subcommands.Any() ? " [commands]" : "";
            var optionsUsage = options.Any() ? " [options]" : "";
            var operandsUsage = operands.Any() ? $" {operands.Select(o => o.Name).ToCsv()}" : "";

            sb.AppendLine($"## {path}");
            sb.AppendLine();
            sb.AppendLine(command.Description);
            sb.AppendLine();
            sb.AppendLine("#### Usage");
            sb.AppendLine($"`{path}{subCommandsUsage}{optionsUsage}{operandsUsage}`");
            sb.AppendLine();

            if (operands.Any())
            {
                sb.AppendLine("#### Arguments");
                sb.AppendLine("|Name|Type|List|Default|Allowed|Description|");
                sb.AppendLine("|---|---|---|---|---|---|");
                operands.ForEach(o =>
                {
                    var isList = o.Arity.AllowsZeroOrMore() ? "true" : "";
                    AppendRow(sb, o.Name, o.TypeInfo.DisplayName, isList, o.DefaultValue, o.AllowedValues, o.Description);
                });
                sb.AppendLine();
            }

            if (options.Any())
            {
                sb.AppendLine("#### Options");
                sb.AppendLine("|Name|Type|List|Default|Allowed|Description|");
                sb.AppendLine("|---|---|---|---|---|---|");
                options.ForEach(o =>
                {
                    var isList = o.Arity.AllowsZeroOrMore() ? "true" : "";
                    AppendRow(sb, o.Template.Replace("|", ", "), o.TypeInfo.DisplayName, isList, o.DefaultValue, o.AllowedValues, o.Description);
                });
                sb.AppendLine();
            }

            if (subcommands.Any())
            {
                sb.AppendLine("#### Subcommands");
                sb.AppendLine("|Name|Description|");
                sb.AppendLine("|---|---|");
                subcommands.ForEach(c =>
                {
                    AppendRow(sb, (_addSubcommandLinks ? GetCommandLink(c) : c.Name), c.Description);
                });
                sb.AppendLine();
            }

            if (!command.ExtendedHelpText.IsNullOrWhiteSpace())
            {
                sb.AppendLine("#### Notes");
                sb.AppendLine();
                sb.AppendLine(command.ExtendedHelpText);
            }
        }

        private static void AppendRow(StringBuilder sb, params object[] cells)
        {
            var row = cells.Select(Sanitize).ToCsv("|");
            sb.AppendLine($"|{row}|");
        }

        private static string Sanitize(object value)
        {
            var text = ToString(value)?.Replace(CurrentDirectory, "{current-dir}");
            return Escape(text);
        }

        private static string Escape(string value)
        {
            if (IsNullValue(value))
            {
                return null;
            }

            var sb = new StringBuilder();
            foreach (var c in value)
            {
                if (EscapeChars.Contains(c))
                {
                    sb.Append('\\');
                }
                sb.Append(c);
            }

            return sb.ToString();
        }

        private static string ToString(object defaultValue)
        {
            if (IsNullValue(defaultValue))
            {
                return null;
            }

            if (defaultValue is string stringValue)
            {
                return stringValue;
            }

            if (defaultValue is IEnumerable collection)
            {
                return collection.ToCsv();
            }

            return defaultValue.ToString();
        }

        private static bool IsNullValue(object obj)
        {
            return obj == null || obj == DBNull.Value;
        }

        private static string GetCommandLink(Command c)
        {
            var path = c.GetPath();
            return $"[{path}](#{path.Replace(" ", "-")})";
        }
    }
}